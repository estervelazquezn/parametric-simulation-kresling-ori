""""
Latin Hypercube Sampling
------------------------------------------------------
 Generates the parameters sampled using LHS using 'smt' library
    
    - INPUTS: 
                n = A list with number of polygon sides
                R = A list with all polygon inscribed radius
              
    - OUTPUTS: values generated by the sampling that fits into the Kresling
               geometry restrictions in a txt file named '_sampling_data.txt'

               This txt includes by rows the following data:

                n - Sample list with number of polygon sides
                h - Sample list with flat pattern height
                R - List of radius according to the samples generated


"""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import smt.sampling_methods as smt
import _kreslingGeometry as kreslingGeometry

# Definition of the globsl variables, which are n and R values
nlist = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
Rlist = 50*np.ones(len(nlist))
# Reference color for plotting
p = ['gold','#B4D28C','#6482B4','#8CB3D2','#E6D25A','#96C8B4']

#-------------------------------------------------------------
# Definition of the maximum limits of the flat 
# heigh given by the geometry
def maxh(nlist_limits):

    max_lim = np.empty(len(nlist_limits))

    # Initialization
    step = 0.01
    h3 = 1
    h = Rlist[0]
    hprev = h

    for j in range(len(nlist_limits)):
        n = nlist_limits[j]
        print('Max limit calculating for - n = ', n, end='\r')
        while(hprev-h3 >= 1):
            # Geometry calculation
            geoInputs = {'n': n, 'R': Rlist[j], 'h': h}
            (geoOutputs) = kreslingGeometry.Geometry(geoInputs)
            h3 = geoOutputs['h3']

            # Loop pdate 
            hprev = h    
            h = h + step

        # Re-initialization for each n value
        h3 = 1
        h = hprev

        max_lim[j] = h - step

    print('')   
    return(max_lim)

#-------------------------------------------------------------
# Definition of the minimum limits of the flat 
# heigh given by the geometry
def minh(nlist_limits):

    nlist_limits = np.flip(nlist_limits)
    min_lim = np.empty(len(nlist_limits))

    # Initialization
    step = 0.01
    h = 80
    h3 = h

    for j in range(len(nlist_limits)):
        n = nlist_limits[j]
        print('Min limit calculating for - n = ', n, end='\r')
        while(h3 > 1):
            # Geometry calculation
            geoInputs = {'n': n, 'R': Rlist[j], 'h': h}
            (geoOutputs) = kreslingGeometry.Geometry(geoInputs)
            h3 = geoOutputs['h3']

            # Loop pdate 
            h = h - step

        min_lim[j] = h + step
        # Re-initialization for each n value
        h3 = h

    print('')  
    return(np.flip(min_lim))

#-------------------------------------------------------------
# Data sampling generation from the nlist 
def data(num):

    min_lim = minh(nlist)
    max_lim = maxh(nlist)
    # Limit definition
    xlimits = np.array([[np.min(nlist), np.max(nlist)], 
                        [np.min(min_lim), np.max(max_lim)]])
    # Sampling with LHS
    sampling = smt.LHS(xlimits=xlimits)
    x = sampling(num)

    # Plotting sample results
    [n,h] = [np.trunc(x[:,0]),x[:,1]]
    plot(n,h,'prueba2',min_lim,max_lim)

    # Selecting the data from the sample which achieve a
    # feasable case
    nNan = 0
    for i in range(len(x)):
        for j in range(len(nlist)):
            if np.trunc(x[i][0]) == nlist[j]:
                if x[i][1] <= min_lim[j] or x[i][1] >= max_lim[j]:
                    x[i] = np.zeros(2)
                    nNan = nNan + 1
                    
                else:
                    x[i][0] = int(x[i][0])

    xpos = x != 0
    x = x[xpos[:,1]]
    
    # Data sampling selected
    n = np.trunc(x[:,0])
    h = x[:,1]
    Rlist_num = Rlist[0]*np.ones(len(n))

    return(n,h,Rlist_num,min_lim,max_lim)

#-------------------------------------------------------------
# Plotter of the n and h data obtained - File name required
def plot(n,h,fileName,min_lim,max_lim):

    # Defining plot style
    matplotlib.rcParams['mathtext.fontset'] = 'stix'
    matplotlib.rcParams['font.family'] = 'STIXGeneral'

    plt.figure(figsize=(9,5))

    print(min_lim)
    print(max_lim)

    plt.plot(n,h,'o',color=p[0])
    plt.fill_between(nlist, min_lim, max_lim, color = p[0], alpha = 0.09)
    plt.fill_between([np.max(nlist), np.max(nlist)-1], 35, 85, alpha = 1, color='white')
    plt.xlabel("Number of sides, n",fontsize=16)
    plt.ylabel("Flat height, h [mm]",fontsize=16 )

    plt.legend(['Sampling data','Solution region'],fontsize=14,loc='lower right')
    # plt.xlim([5.5,12.5])


    plt.tick_params(axis='x', labelsize=14)
    plt.tick_params(axis='y', labelsize=14)

    plt.grid(visible=True, which='both',axis='both')
    plt.tight_layout(pad=1.0)
    plt.savefig(fileName +'.png', format='png', dpi=200)

    plt.show()

#-------------------------------------------------------------
# Plotter of limits obtained - File name required
def plotLimits(fileName):

    # Defining plot style
    matplotlib.rcParams['mathtext.fontset'] = 'stix'
    matplotlib.rcParams['font.family'] = 'STIXGeneral'

    plt.figure(figsize=(9,5))

    plt.plot(nlist,min_lim,color=p[1])
    plt.plot(nlist,max_lim,color=p[2])

    plt.fill_between(nlist, min_lim, max_lim, color = p[0], alpha = 0.09)
    plt.fill_between([np.max(nlist), np.max(nlist)], 35, 85, alpha = 1, color='white')
    plt.xlabel("Number of sides, n",fontsize=16)
    plt.ylabel("Flat height, h [mm]",fontsize=16 )
    plt.legend(['Minimum limit','Maximum limits','Solution region'],fontsize=14,loc='lower right')


    plt.tick_params(axis='x', labelsize=14)
    plt.tick_params(axis='y', labelsize=14)

    plt.grid(visible=True, which='both',axis='both')
    plt.tight_layout(pad=1.0)
    plt.savefig(fileName +'.png', format='png', dpi=200)

    plt.show()
    
#==================================================================
# -------------- M A I N ------------------------------------------
#
if __name__ == '__main__':

    min_lim = minh(nlist)
    max_lim = maxh(nlist)
    plotLimits('FIGURES/limits')

    [n,h,R] = data(num=120)
    plot(n,h,'FIGURES/prueba')
    
