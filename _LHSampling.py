""""
Latin Hypercube Sampling
------------------------------------------------------
 Generates the parameters sampled using LHS using 'smt' library
    
    - INPUTS: 
                n = A list with number of polygon sides
                R = A list with all polygon inscribed radius
              
    - OUTPUTS: values generated by the sampling that fits into the Kresling
               geometry restrictions in a txt file named '_sampling_data.txt'

               This txt includes by rows the following data:

                n - Sample list with number of polygon sides
                h - Sample list with flat pattern height
                R - List of radius according to the samples generated


"""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import smt.sampling_methods as smt
import _kreslingGeometry as kreslingGeometry


nlist = [6,7,8,9,10,11,12]
nlist = [6]
Rlist = 50*np.ones(len(nlist))

#-------------------------------------------------------------
# Definition of the maximum limits of the flat 
# heigh given by the geometry
def maxh(nlist_limits):

    max_lim = np.empty(len(nlist_limits))

    # Initialization
    step = 0.01
    h3 = 1
    h = Rlist[0]
    hprev = h

    for j in range(len(nlist_limits)):
        n = nlist_limits[j]
        print('Max limit calculating for - n = ', n, end='\r')
        while(hprev-h3 >= 1):
            # Geometry calculation
            geoInputs = {'n': n, 'R': Rlist[j], 'h': h}
            (geoOutputs) = kreslingGeometry.Geometry(geoInputs)
            h3 = geoOutputs['h3']

            # Loop pdate 
            hprev = h    
            h = h + step

        # Re-initialization for each n value
        h3 = 1
        h = hprev

        max_lim[j] = h - step

    print('')   
    return(max_lim)

#-------------------------------------------------------------
# Definition of the minimum limits of the flat 
# heigh given by the geometry
def minh(nlist_limits):

    nlist_limits = np.flip(nlist_limits)
    min_lim = np.empty(len(nlist_limits))

    # Initialization
    step = 0.01
    h = 80
    h3 = h

    for j in range(len(nlist_limits)):
        n = nlist_limits[j]
        print('Min limit calculating for - n = ', n, end='\r')
        while(h3 > 1):
            # Geometry calculation
            geoInputs = {'n': n, 'R': Rlist[j], 'h': h}
            (geoOutputs) = kreslingGeometry.Geometry(geoInputs)
            h3 = geoOutputs['h3']

            # Loop pdate 
            h = h - step

        min_lim[j] = h + step
        # Re-initialization for each n value
        h3 = h

    print('')  
    return(np.flip(min_lim))

#-------------------------------------------------------------
# Data sampling generation from the nlist 
def data(num):

    # Limit definition
    xlimits = np.array([[np.min(nlist), np.max(nlist)], 
                        [np.min(min_lim), np.max(max_lim)]])
    # Sampling with LHS
    sampling = smt.LHS(xlimits=xlimits)
    x = sampling(num)

    # Selecting the data from the sample which achieve a
    # feasable case
    nNan = 0
    for i in range(len(x)):
        for j in range(len(nlist)):
            if np.trunc(x[i][0]) == nlist[j]:
                if x[i][1] <= min_lim[j] or x[i][1] >= max_lim[j]:
                    x[i] = np.zeros(2)
                    nNan = nNan + 1
                    
                else:
                    x[i][0] = int(x[i][0])

    xpos = x != 0
    x = x[xpos[:,1]]
    
    # Data sampling selected
    n = np.trunc(x[:,0])
    h = x[:,1]

    Rlist_num = Rlist[0]*np.ones(len(n))

    return(n,h,Rlist_num)

def plot(x):

    [n,h,R] = x

    # Plot
    matplotlib.rcParams['mathtext.fontset'] = 'stix'
    matplotlib.rcParams['font.family'] = 'STIXGeneral'

    plt.figure(figsize=(9,5))
    plt.fill_between(nlist, min_lim, max_lim, alpha = 0.1)

    # plt.plot(x[:, 0], x[:, 1], "o")
    plt.plot(n, h, "o")
    plt.fill_between([17,18], 35.36, 85.72, alpha = 1, color = 'white')
    plt.fill_between([13,15], 35.36, 85.72, alpha = 1, color = 'white')
    # plt.plot(x[:, 0], x[:, 1], "o", nlist,max_lim,  nlist,min_lim)
    plt.xlabel("Number of sides",fontsize=16)
    plt.ylabel("h size",fontsize=16 )

    plt.tick_params(axis='x', labelsize=14)
    plt.tick_params(axis='y', labelsize=14)

    plt.xlim(5,13)
    plt.ylim(43,84)
    plt.grid(visible=True, which='both',axis='both')

    plt.show()

def plot2(x):
    # Plot
    [n,h,R] = x
    
    matplotlib.rcParams['mathtext.fontset'] = 'stix'
    matplotlib.rcParams['font.family'] = 'STIXGeneral'

    plt.figure(figsize=(7,6))
    plt.fill_between(nlist, min_lim, max_lim, alpha = 0.1)
    for i in range(len(n)):
        plt.fill_between([n[i],n[i]+1], h[i]-0.15, h[i]+0.15, alpha = 1, color='black')

    # plt.plot(x[:, 0], x[:, 1], "o")
    plt.plot(n, h, "o")
    plt.fill_between([17,18], 35.36, 85.72, alpha = 1, color = 'white')
    plt.fill_between([13,15], 35.36, 85.72, alpha = 1, color = 'white')
    plt.fill_between([4,6], 35.36, 85.72, alpha = 1, color = 'white')
    # plt.plot(x[:, 0], x[:, 1], "o", nlist,max_lim,  nlist,min_lim)
    plt.xlabel("Number of sides",fontsize=16)
    plt.ylabel("h size",fontsize=16 )

    plt.tick_params(axis='x', labelsize=14)
    plt.tick_params(axis='y', labelsize=14)

    plt.xlim(5,14)
    plt.ylim(43,84)
    plt.grid(visible=True, which='both',axis='both')

    plt.show()
    
#==================================================================
# -------------- M A I N ------------------------------------------
#
if __name__ == '__main__':

    min_lim = minh(nlist)
    max_lim = maxh(nlist)
    sampling_data = data(num=120)
    np.savetxt('_sampling_data.txt',sampling_data,delimiter=" ")
    # data = np.loadtxt('_sampling_data.txt',delimiter=' ')
    plot(sampling_data)

    
